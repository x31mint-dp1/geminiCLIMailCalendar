name: Genera e invia email notizie tech

on:
  workflow_dispatch:
  schedule:
  - cron: "0 6 * * *" # ogni giorno alle 06:00 UTC (circa 08:00 in Italia durante l'ora legale)

# Evita sovrapposizioni: se una run è in corso, cancella quella precedente
concurrency:
  group: generate-and-email
  cancel-in-progress: true

jobs:
  run-script:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Precheck secrets (non bloccante)
        id: precheck
        shell: bash
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          CLIENT_SECRET_JSON: ${{ secrets.CLIENT_SECRET_JSON }}
          TOKEN_JSON: ${{ secrets.TOKEN_JSON }}
        run: |
          missing=0
          [ -z "$GEMINI_API_KEY" ] && echo "::warning::Manca il secret GEMINI_API_KEY" && missing=1
          [ -z "$CLIENT_SECRET_JSON" ] && echo "::warning::Manca il secret CLIENT_SECRET_JSON" && missing=1
          [ -z "$TOKEN_JSON" ] && echo "::warning::Manca il secret TOKEN_JSON" && missing=1
          if [ "$missing" -eq 0 ]; then
            echo "have_secrets=true" >> "$GITHUB_OUTPUT"
            echo "Tutti i secrets presenti. Procedo con install e run."
          else
            echo "have_secrets=false" >> "$GITHUB_OUTPUT"
            echo "::notice::Secrets mancanti: i passaggi di installazione ed esecuzione verranno saltati, ma il job rimarrà verde."
          fi

      - name: Install dependencies
        if: ${{ steps.precheck.outputs.have_secrets == 'true' }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Jitter (5 secondi)
        if: ${{ steps.precheck.outputs.have_secrets == 'true' }}
        shell: bash
        run: |
          sleep 5

      - name: Run CreaInviaEmail
        if: ${{ steps.precheck.outputs.have_secrets == 'true' }}
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          CLIENT_SECRET_JSON: ${{ secrets.CLIENT_SECRET_JSON }}
          TOKEN_JSON: ${{ secrets.TOKEN_JSON }}
          GITHUB_ACTIONS: "true"
          TZ: Europe/Rome
        run: |
          python CreaInviaEmail.py

      - name: Upload generated artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: output
          path: |
            notizie_tech.csv
            contenuto_da_approvare.txt
            gemini_raw_output.txt
          if-no-files-found: ignore
          retention-days: 10

      - name: Riepilogo Job (Job Summary)
        if: always()
        shell: bash
        env:
          HAVE_SECRETS: ${{ steps.precheck.outputs.have_secrets }}
          TZ: Europe/Rome
        run: |
          {
            echo "# Riepilogo Esecuzione"
            echo
            echo "- Data/Ora: $(date '+%Y-%m-%d %H:%M:%S %Z')"
            echo "- Secrets presenti: ${HAVE_SECRETS:-unknown}"
            if [ -f notizie_tech.csv ]; then
              echo "- Righe CSV: $(wc -l < notizie_tech.csv | tr -d ' ')"
              echo "- Dimensione CSV: $(wc -c < notizie_tech.csv | tr -d ' ') bytes"
            else
              echo "- CSV non generato"
            fi
            if [ -f contenuto_da_approvare.txt ]; then
              echo "- Dimensione testo post: $(wc -c < contenuto_da_approvare.txt | tr -d ' ') bytes"
            else
              echo "- Testo post non generato"
            fi
            if [ -f gemini_raw_output.txt ]; then
              echo "- Output grezzo presente"
            fi
            echo
            echo "> Nota: il modello Gemini usato è definito nello script Python."
          } >> "$GITHUB_STEP_SUMMARY"
