name: Run Email->Calendar Agent

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0,2,5,7,9,12,14,16,19,22 * * *'  # 10 volte al giorno UTC - ogni 2-3 ore

concurrency:
  group: calendar-agent-${{ github.ref }}
  cancel-in-progress: false

jobs:
  run-agent:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      TZ: Europe/Rome
      TIMEZONE: Europe/Rome
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Precheck secrets (non bloccante)
        id: precheck
        shell: bash
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          CLIENT_SECRET_JSON: ${{ secrets.CLIENT_SECRET_JSON }}
          TOKEN_JSON: ${{ secrets.TOKEN_JSON }}
        run: |
          missing=0
          [ -z "$GEMINI_API_KEY" ] && echo "::warning::Manca il secret GEMINI_API_KEY" && missing=1 || true
          [ -z "$CLIENT_SECRET_JSON" ] && echo "::warning::Manca il secret CLIENT_SECRET_JSON" && missing=1 || true
          [ -z "$TOKEN_JSON" ] && echo "::warning::Manca il secret TOKEN_JSON" && missing=1 || true
          if [ "$missing" -eq 0 ]; then
            echo "have_secrets=true" >> "$GITHUB_OUTPUT"
            echo "Tutti i secrets presenti. Procedo con install e run."
          else
            echo "have_secrets=false" >> "$GITHUB_OUTPUT"
            echo "::notice::Secrets mancanti: i passaggi di installazione ed esecuzione verranno saltati, ma il job rimarrà verde."
          fi

      - name: Install system deps
        if: ${{ steps.precheck.outputs.have_secrets == 'true' }}
        shell: bash
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y curl

      - name: Install Python dependencies
        if: ${{ steps.precheck.outputs.have_secrets == 'true' }}
        shell: bash
        run: |
          set -euxo pipefail
          python -m pip install --upgrade pip
          pip install -r "requirements.txt"

      - name: Jitter (5 secondi)
        if: ${{ steps.precheck.outputs.have_secrets == 'true' }}
        shell: bash
        run: |
          sleep 5

      - name: Run agent
        if: ${{ steps.precheck.outputs.have_secrets == 'true' }}
        working-directory: ${{ github.workspace }}
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          CLIENT_SECRET_JSON: ${{ secrets.CLIENT_SECRET_JSON }}
          TOKEN_JSON: ${{ secrets.TOKEN_JSON }}
          GITHUB_ACTIONS: "true"
          TZ: Europe/Rome
          MAX_UNREAD_TO_PROCESS: "5"
          PER_EMAIL_SLEEP_SECS: "10"
          GEMINI_MODEL: "gemini-2.5-pro"
        shell: bash
        run: |
          python "ControllaEmailCreaEvento.py"

      - name: Job summary
        if: always()
        shell: bash
        env:
          HAVE_SECRETS: ${{ steps.precheck.outputs.have_secrets }}
        run: |
          {
            echo "# Riepilogo Agent Gmail -> Calendar";
            echo;
            echo "- Data/Ora: $(date '+%Y-%m-%d %H:%M:%S %Z')";
            echo "- Branch: $GITHUB_REF";
            echo "- Commit: $GITHUB_SHA";
            echo "- Runner: $RUNNER_OS";
            echo "- Secrets presenti: ${HAVE_SECRETS:-unknown}";
            if [ -f automation.log ]; then
              echo "- Log presente: si";
              echo "- Dimensione log: $(wc -c < automation.log | tr -d ' ') bytes";
            else
              echo "- Log presente: no";
            fi
            echo;
            echo "> Nota: se la CLI Gemini non è disponibile, lo script usa automaticamente il fallback SDK.";
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Raccogli artefatti (log)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: agent-logs-${{ github.run_id }}
          path: |
            automation.log
          if-no-files-found: ignore
          retention-days: 10
